buildscript {
    ext.kotlin_version = '1.0.0'
    ext.spring_boot_version = '1.3.2.RELEASE'
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'spring-boot'
apply plugin: 'application'

jar {
    baseName = 'gs-rest-service'
    version =  '0.1.0'
}

repositories {
    jcenter()
    maven {
        url "http://repository.jetbrains.com/kotlin-nosql"
    }
}

springBoot {
    mainClass = 'com.rocketraccoons.hyenas.cl4ptp.ApplicationKt'
}

dependencies {
    //runtime "org.slf4j:slf4j-simple:1.7.12"
    compile "com.google.code.gson:gson:2.3.1"
    compile "com.heroku.sdk:heroku-jdbc:0.1.1"
    //compile "org.postgresql:postgresql:9.4-1201-jdbc4"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude group: "com.fasterxml.jackson.core"
    }
    compile 'com.squareup.okhttp3:okhttp:3.2.0'
    compile "org.mongodb:mongo-java-driver:3.0.2"
    compile('org.jetbrains.kotlin:kotlin-nosql-mongodb:0.1-SNAPSHOT') {
        exclude group: 'org.mongodb'
    }

    compile "org.jsoup:jsoup:1.8.3"

    testCompile "junit:junit"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
}

sourceSets {
    main {
        kotlin {
            srcDir "src/main/kotlin"
        }
        java {
            srcDir "src/main/java"
        }
    }
    test {
        kotlin {
            srcDir "test/main/kotlin"
        }
    }
    local {
        kotlin {
            srcDir "src/local/kotlin"
        }
        compileClasspath += sourceSets.main.output
    }
    remote {
        kotlin {
            srcDir "src/remote/kotlin"
        }
        compileClasspath += sourceSets.main.output
    }
}

// installDist is important to generate path in Heroku's Procfile:
// build/install/telegram-bot-cl4p-tp/bin/telegram-bot-cl4p-tp -- this will be executed on start
task stage {
  dependsOn(clean, installDist)
}

// experiments with Android like flavours
task localJar (type: Jar, dependsOn: jar) {
    from sourceSets.local.output
    classifier = 'localJar'
}

task remoteJar (type: Jar, dependsOn: jar) {
    from sourceSets.remote.output
    classifier = 'remoteJar'
}

//compileLocalKotlin.dependsOn compileKotlin
//compileRemoteKotlin.dependsOn compileKotlin

/*task bootJar
bootJar.dependsOn localJar
build.dependsOn(bootJar)*/

task localRun (type: BootRepackage, dependsOn: localJar) {
    withJarTask = localJar
    doLast {
        sourceSets.main.compileClasspath += sourceSets.local.output
    }
}